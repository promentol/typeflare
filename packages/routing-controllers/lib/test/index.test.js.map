{"version":3,"file":"index.test.js","sourceRoot":"","sources":["../../test/index.test.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,4BAA0B;AAE1B,6DAAiF;AAEjF,6DAAkF;AAGlF,8DAAsC;AACtC,0EAA+C;AAC/C,wCAAgD;AAChD,mDAAyC;AAGzC,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE;IACpB,IAAI,UAAgB,CAAC;IAErB,QAAQ,CAAC,kBAAkB,EAAE;QAC3B,SAAS,CAAC,CAAC,IAAkB,EAAE,EAAE;YAC/B,IAAA,4CAAsB,GAAE,CAAC,KAAK,EAAE,CAAC;YAGjC,IAAM,cAAc,GAApB,MAAM,cAAc;gBAElB,MAAM,CAAc,EAAU;oBAC5B,OAAO;wBACL,KAAK,EAAE,EAAE;qBACV,CAAC;gBACJ,CAAC;aACF,CAAA;YALC;gBADC,IAAA,yBAAG,EAAC,MAAM,CAAC;gBACJ,WAAA,IAAA,2BAAK,EAAC,IAAI,CAAC,CAAA;wDAIlB;YANG,cAAc;gBADnB,IAAA,oCAAc,EAAC,QAAQ,CAAC;eACnB,cAAc,CAOnB;YAGD,IAAM,kBAAkB,GAAxB,MAAM,kBAAkB;gBAGtB,QAAQ;oBACN,OAAO,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,qBAAqB,EAAE,CAAC;gBAC5D,CAAC;gBAID,QAAQ;oBACN,QAAQ;gBACV,CAAC;gBAID,QAAQ;oBACN,OAAO,iBAAiB,CAAC;gBAC3B,CAAC;aACF,CAAA;YAfC;gBAFC,IAAA,yBAAG,EAAC,WAAW,CAAC;gBAChB,IAAA,8BAAQ,EAAC,eAAe,CAAC;8DAGzB;YAID;gBAFC,IAAA,yBAAG,EAAC,WAAW,CAAC;gBAChB,IAAA,8BAAQ,EAAC,iBAAiB,CAAC;8DAG3B;YAID;gBAFC,IAAA,yBAAG,EAAC,WAAW,CAAC;gBAChB,IAAA,8BAAQ,EAAC,wBAAwB,CAAC;8DAGlC;YAjBG,kBAAkB;gBADvB,IAAA,oCAAc,GAAE;eACX,kBAAkB,CAkBvB;YAED,UAAU,GAAG,IAAA,wBAAgB,GAAE,CAAA;YAE/B,OAAO,CAAC,GAAG,CAAC,IAAA,mBAAK,EAAC;gBAChB,KAAK,EAAE,UAAU,CAAC,KAAK;gBACvB,IAAI,EAAE,IAAI;aACX,EAAE,CAAC,CAAC,EAAE,EAAE;gBACP,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;gBACd,IAAI,EAAE,CAAA;YACR,CAAC,CAAC,CAAC,CAAA;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,CAAC,IAAkB,EAAE,EAAE;YAC9B,qBAAqB;QACvB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gBAAgB,EAAE,KAAK,IAAI,EAAE;YAC9B,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACrB,MAAM,QAAQ,GAAG,MAAM,eAAK,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YAC9C,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,2BAAe,CAAC,EAAE,CAAC,CAAC;YACpD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,qCAAqC;QACrC,0BAA0B;QAC1B,mDAAmD;QACnD,yDAAyD;QACzD,qDAAqD;QACrD,MAAM;QAEN,qCAAqC;QACrC,0BAA0B;QAC1B,mDAAmD;QACnD,yDAAyD;QACzD,qDAAqD;QACrD,MAAM;IACR,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import 'reflect-metadata';\n\nimport { JsonController, Param, Body, Get, Redirect } from 'routing-controllers';\n\nimport { createExpressServer, getMetadataArgsStorage } from 'routing-controllers';\nimport {Hono} from 'hono';\nimport DoneCallback = jest.DoneCallback;\nimport axios from './utilities/axios';\nimport HttpStatusCodes from 'http-status-codes'\nimport { createHonoServer } from '../src/index';\nimport { serve } from '@hono/node-server'\n\n\ndescribe(`last`, () => {\n  let honoServer: Hono;\n\n  describe('dynamic redirect', function () {\n    beforeAll((done: DoneCallback) => {\n      getMetadataArgsStorage().reset();\n\n      @JsonController('/users')\n      class TestController {\n        @Get('/:id')\n        getOne(@Param('id') id: string): any {\n          return {\n            login: id,\n          };\n        }\n      }\n\n      @JsonController()\n      class RedirectController {\n        @Get('/template')\n        @Redirect('/users/:owner')\n        template(): any {\n          return { owner: 'pleerock', repo: 'routing-controllers' };\n        }\n\n        @Get('/original')\n        @Redirect('/users/pleerock')\n        original(): void {\n          // Empty\n        }\n\n        @Get('/override')\n        @Redirect('https://api.github.com')\n        override(): string {\n          return '/users/pleerock';\n        }\n      }\n\n      honoServer = createHonoServer()\n\n      console.log(serve({\n        fetch: honoServer.fetch,\n        port: 3001,\n      }, (x) => {\n        console.log(x)\n        done()\n      }))\n    });\n\n    afterAll((done: DoneCallback) => {\n      // honoServer.close()\n    });\n\n    it('using template', async () => {\n      expect.assertions(2);\n      const response = await axios.get('/template');\n      expect(response.status).toEqual(HttpStatusCodes.OK);\n      expect(response.data.login).toEqual('pleerock');\n    });\n\n    // it('using override', async () => {\n    //   expect.assertions(2);\n    //   const response = await axios.get('/override');\n    //   expect(response.status).toEqual(HttpStatusCodes.OK);\n    //   expect(response.data.login).toEqual('pleerock');\n    // });\n\n    // it('using original', async () => {\n    //   expect.assertions(2);\n    //   const response = await axios.get('/original');\n    //   expect(response.status).toEqual(HttpStatusCodes.OK);\n    //   expect(response.data.login).toEqual('pleerock');\n    // });\n  });\n});"]}